name: 'Auto Publish'

description: 'Automatically publish to NPM and create Github release'

inputs:
  github-token:
    description: "Your Github token, it's already available to your Github action"
    required: true
  npm-token:
    description: "Your Npm Publish token"
    required: true
  optic-url:
    description: "URL if you have a custom application that serves OTP"
    required: false
    default: "https://optic-zf3votdk5a-ew.a.run.app/api/generate/"
  optic-token:
    description: "Your Optic token. You can add your Npm secret to the Optic app, generate a token and pass it to this input"
    required: true
  actor-name:
    description: "The name you want to see in the new release commit."
    required: false
    default: "${{ github.actor }}"
  actor-email:
    description: "The email you want to see in the new release commit"
    required: false
    default: "actions@users.noreply.github.com"
  semver:
    description: "The semver to use for this new release"
    required: true
    default: "patch"
  npm-tag:
    description: "If you want to release to the Npm with a custom tag, pass it here"
    required: false
    default: "latest"

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v2
    - run: |
        git config --global user.email "${{ inputs.actor-email }}"
        git config --global user.name "${{ inputs.actor-name }}"
        npm config set //registry.npmjs.org/:_authToken=${{ inputs.npm-token }}
      shell: 'bash'
    - run: |
        npm install
        v=$(npm version ${{ inputs.semver }})
        echo "Bumped to $v"
        echo "::set-output name=version::$v"

        if [ -n "${{ inputs.optic-token }}" ]; then
          echo "Requesting OTP from Optic..."
          otp=$(curl -s ${{ inputs.optic-url }}${{ inputs.optic-token }})
          npm publish --otp $otp --tag ${{ inputs.npm-tag }}
        else
          npm publish --tag ${{ inputs.npm-tag }}
        fi
      shell: 'bash'
      id: 'npm-op'
    # - run: git push origin
      # shell: 'bash'
    - uses: actions/github-script@v5
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const branchName = 'refs/heads/release/${{ steps.npm-op.outputs.version }}';

          await github.rest.git.createRef({
            owner,
            repo,
            ref: branchName,
            sha: '${{ github.sha }}',
          });

          await github.rest.pulls.create({
            owner,
            repo,
            head: branchName,
            base: 'refs/heads/main',
          });

          await github.rest.repos.createRelease({
            owner,
            repo,
            tag_name: '${{ steps.npm-op.outputs.version }}',
            generate_release_notes: true
          });
